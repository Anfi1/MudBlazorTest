@page "/clients/{name}"

@using Microsoft.EntityFrameworkCore
@inject IDialogService DialogService
@using C1CopyMudBlazor.Data.Interfaces

@inject IWorkerService workerService
@inject IOfficeService officeService
@inject ISnackbar Snackbar

@if (client != null)
{
    <MudGrid>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">@name</MudPaper>
    </MudItem>
    <MudItem xs="9">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Tab One">
                <MudText>Content One</MudText>
            </MudTabPanel>
            <MudTabPanel Text="Офисы">
               
                <MudCard Elevation="25">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Добавить / Изменить офис</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="office.OfficeName" Label="Название Офиса" Variant="Variant.Text" Margin="Margin.Normal"/>
                        <MudTextField @bind-Value="office.Adress" Label="Адрес" Variant="Variant.Text" Margin="Margin.Normal"/>
                        <br/>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveOffice">Сохранить Офис</MudButton>
                    </MudCardContent>
                </MudCard>
                <br/>
                <MudTable Elevation="25" Items="getOffices()" Filter="new Func<Office, bool>(SearchOffice)" @bind-customer="office">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Офисы</MudText>
                        <MudSpacer/>
                        <MudTextField @bind-Value="searchString1" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Офис</MudTh>
                        <MudTh>Адрес</MudTh>
                        <MudTh>Действия</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="FirstName">@context.OfficeName</MudTd>
                        <MudTd DataLabel="LastName">@context.Adress</MudTd>
                        <MudTd DataLabel="">
                            <MudFab @onclick="@(() => EditOffice(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"/>
                            <MudFab @onclick="@(() => DeleteOffice(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                @code {
                    private string searchString1 = "";
                    private Office office = new Office(){};
                    private IEnumerable<Office> offices = new List<Office>();

                    private IEnumerable<Office> getOffices()
                    {
                        offices = officeService.GetOffices().Where(o=>o.ClientID==client.ID);
                        return offices;
                    }
                
                    private bool SearchOffice(Office office)
                    {
                        if (string.IsNullOrWhiteSpace(searchString)) return true;
                        if (office.OfficeName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                            || office.Adress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                        {
                            return true;
                        }
                        return false;
                    }
                
                    private void SaveOffice()
                    {
                        office.ClientID = client.ID;
                        officeService.SaveOffice(office);
                        office = new Office(){};
                        Snackbar.Add("Customer Saved.", Severity.Success);
                        getOffices();
                    }
                
                    private void EditOffice(int id)
                    {
                        office = offices.FirstOrDefault(c => c.ID == id);
                    }
                
                    private async Task DeleteOffice(int id)
                    {
                        var parameters = new DialogParameters();
                        parameters.Add("ClientName", $"{office.OfficeName}");
                        parameters.Add("ButtonText", "Удалить");
                        parameters.Add("Color", Color.Error);
                
                        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
                        var dialog = DialogService.Show<RemoveClientDialog>("Удалить офис?", parameters, options);
                        var result = await dialog.Result;
                        if (!result.Cancelled)
                        {
                            officeService.DeleteOffice(id);
                            Snackbar.Add("Офис удален.", Severity.Success);
                            getOffices();
                        }
                        
                    }
                
                }
            </MudTabPanel>
            <MudTabPanel Text="Сотрудники">

                <MudCard Elevation="25">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Добавить / Изменить сотрудника</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="worker.FIO" Label="ФИО" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                        <MudSelect @bind-Value="worker.OfficeID" Label="Офис" Variant="Variant.Text" Margin="Margin.Normal">
                            @foreach (var item in offices)
                            {
                                <MudSelectItem Value="@item.ID">@item.OfficeName</MudSelectItem>
                            }

                        </MudSelect>
                        <MudTextField @bind-Value="worker.WorkPlaceID" Label="Номер рабочего места" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                        <br/>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveWorker">Сохранить изменения</MudButton>
                    </MudCardContent>
                </MudCard>
                <br/>
                <MudTable Elevation="25" Items="getWorkers()" Filter="new Func<Worker, bool>(SearchWorker)" @bind-customer="worker">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Сотрудники</MudText>
                        <MudSpacer/>
                        <MudTextField @bind-Value="searchString" Placeholder="Поиск по таблице..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Действия</MudTh>
                        <MudTh>Клиент</MudTh>
                        <MudTh>Фио</MudTh>
                        <MudTh>№ места</MudTh>
                        <MudTh>Офис</MudTh>
                        <MudTh>AnyDesk</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="" Style="width: 40px">
                            <MudFab @onclick="@(() => EditWorker(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"/>
                            <MudFab @onclick="@(() => DeleteWorker(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
                        </MudTd>
                        <MudTd DataLabel="FIO">@context.Office.Client.Name</MudTd>
                        <MudTd DataLabel="FIO">@context.FIO</MudTd>
                        <MudTd DataLabel="WorkPlace">@context.WorkPlaceID</MudTd>
                        <MudTd DataLabel="WorkPlace">@context.Office.OfficeName</MudTd>


                        <MudTd DataLabel="WorkPlace">
                            <MudLink Href=@($"anydesk:{context.AnyDesk}")>@context.AnyDesk</MudLink>
                        </MudTd>

                    </RowTemplate>
                </MudTable>

            </MudTabPanel>
            <MudTabPanel Text="Tab Disabled" Disabled="true">
                <MudText>Content Disabled</MudText>
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>
}


@code {

    [Parameter]
    public string? name { get; set; }
    private static Client? client { get; set; }

    private string searchString = "";
    private Worker worker = new Worker();
    private IEnumerable<Worker> workers = new List<Worker>();

    protected override async Task OnInitializedAsync()
    {
        using (var db = new ApplicationContext())
        {
            client = db.Clients.FirstOrDefault(c => c.Name == name);
        }
        getWorkers();
        getOffices();
    }

    private IEnumerable<Worker> getWorkers()
    {
        workers = workerService.GetWorkersByClient(name);
        return workers;
    }

    private bool SearchWorker(Worker worker)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (worker.FIO.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || (worker.AnyDesk).Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || worker.Office.OfficeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void SaveWorker()
    {
        workerService.SaveWorker(worker);
        worker = new Worker();
        Snackbar.Add("Customer Saved.", Severity.Success);
        getWorkers();
    }

    private void EditWorker(int id)
    {
        worker = workers.FirstOrDefault(c => c.ID == id);
    }

    private async Task DeleteWorker(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ClientName", $"{worker.FIO}");
        parameters.Add("ButtonText", "Удалить");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveClientDialog>("Удалить сотрудника?", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            workerService.DeleteWorker(id);
            Snackbar.Add("Сотрудник удален.", Severity.Success);
            getWorkers();
        }
    }

}