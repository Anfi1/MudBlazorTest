@using C1CopyMudBlazor.Data.Interfaces
@using Microsoft.AspNetCore.Components
@using C1CopyMudBlazor.Pages.Clients.Dialog
@using C1CopyMudBlazor.Pages.WorkPlaces
@using Microsoft.AspNetCore.Http.Extensions
@inject IDialogService DialogService
@inject ITechService techService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudTable Hover="true" @ondblclick="(() => Edit(selectedItem1.ID))" Elevation="25" @ref="mudTable" T="Tech" Items="getTech()" Filter="new Func<Tech, bool>(Search)"
          OnRowClick="RowClickEvent" @bind-customer="tech" Dense="true">
    <ToolBarContent>
            <MudText Typo="Typo.h6">Техника</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="searchString" Placeholder="Поиск по таблице..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            <MudFab OnClick="AddItem" Size="Size.Small" Class="ml-4 mt-4" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success"/>
        </ToolBarContent>
        <HeaderContent>
                
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Tech, object>(x => x.InventaryID)">Инв</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Tech, object>(x => x.Type)">Тип</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Tech, object>(x => x.Model)">Модель</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Tech, object>(x => x.IPAdress)">IP</MudTableSortLabel>
                </MudTh>
                <MudTh>Действия</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="FIO">@context.InventaryID</MudTd>
                <MudTd DataLabel="FIO">@context.Type</MudTd>
                <MudTd DataLabel="FIO">@context.Model</MudTd>
                <MudTd DataLabel="FIO">@context.IPAdress</MudTd>
                <MudTd DataLabel="">
                    <MudFab @onclick="@(() => Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
                </MudTd>
            </RowTemplate>
    <PagerContent>
                <MudTablePager/>
            </PagerContent>
</MudTable>

@code {

    [Parameter]
    public int id { get; set; } 
    [Parameter]
    public IEnumerable<WorkPlace> workPlaces { get; set; } 
    [Parameter]
    public IEnumerable<Office> offices { get; set; }

    private List<Tech> teches = new List<Tech>();
    private Tech tech = new Tech();
    private string searchString = "";
    private MudTable<Tech> mudTable;
    private int selectedRowNumber = -1;
    private Tech selectedItem1;
    private Tech elementBeforeEdit;

    protected override async Task OnInitializedAsync()
    {
        getTech();
    }

    private IEnumerable<Tech> getTech()
    {
        teches = techService.GetTechByClientID(id);

        return teches;
    }

    private bool Search(Tech tech)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (searchString.Length > 2 && tech.InventaryID.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || tech.Type.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || tech.Model.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || tech.WorkPlace.WorkplaceNumber.Contains(searchString,StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void RowClickEvent(TableRowClickEventArgs<Tech> item)
    {
        selectedItem1 = item.Item;
    }

    private string SelectedRowClassFunc(Client client, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(client))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private void RedirectToTech()
    {
        var uri = NavigationManager.Uri;

        NavigationManager.NavigateTo($"{uri}/{selectedItem1.ID}");
    }

    private async Task AddItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("Tech", tech);
        parameters.Add("WorkPlaces", workPlaces);
        parameters.Add("Offices", offices);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<TechEditAddDialog>("Добавить технику", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Save();
        }
    }

    private void Save()
    {
        tech.ClientID = id;
        tech.OfficeID = null;
        tech.WorkPlaceID = null;
        techService.SaveTech(tech);
        tech = new Tech();
        Snackbar.Add("Изменения сохранены", Severity.Success);
        getTech();
    }

    private async Task Save(int id)
    {
        tech = teches.FirstOrDefault(c => c.ID == id);
        techService.SaveTech(tech);
        tech = new Tech();
        Snackbar.Add("Изменения сохранены", Severity.Success);
    }

    private async Task Edit(int id)
    {
        tech = teches.FirstOrDefault(c => c.ID == id);
        var parameters = new DialogParameters();
        parameters.Add("Tech", tech);
        parameters.Add("WorkPlaces", workPlaces);
        parameters.Add("Offices", offices);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<TechEditAddDialog>("Изменить Технику", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Save();
        }
        tech = new Tech();
    }

    private async Task Delete(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ButtonText", "Удалить");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveClientDialog>("Удалить технику??", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            techService.DeleteTech(id);
            Snackbar.Add("Техника удалена.", Severity.Success);
            getTech();
        }
    }

}