@page "/register"
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject ApplicationContext db
@inject ISnackbar Snackbar 
@inject NavigationManager nav
@inject IHttpContextAccessor _accessor

<title>Регистрация</title>

<MudTextField Label="Почта" @bind-Value="email" Counter="40" MaxLength="40" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" />
<MudTextField Label="Пароль" @bind-Value="password" Counter="40" MaxLength="40" Immediate="true" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"/>
<MudTextField Label="Подтверждение" @bind-Value="confirmpassword" Counter="40" MaxLength="40" Immediate="true" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"/>

<MudButton OnClick="RegisterAcc">Зарегестрироваться</MudButton>



@code {
    private string email;
    private string password;
    private string confirmpassword;

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 40 < ch?.Length)
            yield return "Max 40 characters";
    }

    private void RegisterAcc()
    {
        var acc = new Account() { Email = email, Password = password, Role = new[] { db.Role.FirstOrDefault(x=>x.Name == "user") }};
        if (db.Account.FirstOrDefault(x=>x.Email ==email) ==null)
        {
            db.Account.Add(acc);
            db.SaveChanges();
            Snackbar.Add("Аккаунт создан.", Severity.Success);
            nav.NavigateTo("/login");
        }
        else
        {
            Snackbar.Add("Аккаунт уже зарегестрирован.", Severity.Error);
        }
    }
}