@using C1CopyMudBlazor.Data.Interfaces
@using C1CopyMudBlazor.Pages.Clients.Dialog
@using Microsoft.AspNetCore.Components
@inject IOfficeService officeService
@inject ISnackbar Snackbar 
@inject IDialogService DialogService
@inject NavigationManager nav;


<MudTable @ref="mudTable" T="Office" OnRowClick="RowClickEvent" RowClassFunc="@SelectedRowClassFunc" 
          @ondblclick="(x) => RedirectToOffice()" Elevation="25" Items="getOffices()" Filter="new Func<Office, bool>(SearchOffice)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Офисы</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Поиск по таблице..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudFab OnClick="AddItem" Size="Size.Small" Class="ml-4 mt-4" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success"/>
    </ToolBarContent>
    <ColGroup>
                <col style="width: 33%;"/>
                <col style="width: 33%;"/>
                <col style="width: 33%;"/>
        </ColGroup>
    <HeaderContent>
        <MudTh>Офис</MudTh>
        <MudTh>Адрес</MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FirstName">@context.OfficeName</MudTd>
        <MudTd DataLabel="LastName">
            <MudLink Href=@($"https://www.google.com/maps/search/{context.Adress}")>@context.Adress</MudLink></MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => EditOffice(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"/>
            <MudFab @onclick="@(() => DeleteOffice(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code
{
    [Parameter] public int ID { get; set; }
    [Parameter] public string name { get; set; }
    private string searchString = "";
    private Office office = new Office() { };
    private MudTable<Office> mudTable;
    private int selectedRowNumber = -1;
    private Office selectedItem1 =new Office();
    private IEnumerable<Office> offices = new List<Office>();

    private IEnumerable<Office> getOffices()
    {
        offices = officeService.GetOffices().Where(o => o.ClientID == ID);
        return offices;
    }

    private void RedirectToOffice()
    {
        nav.NavigateTo($"Clients/{name}/Offices/{selectedItem1.OfficeName}");
    }

    private void RowClickEvent(TableRowClickEventArgs<Office> item)
    {
        selectedItem1 = item.Item;
    }
    private string SelectedRowClassFunc(Office legal, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(legal))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private bool SearchOffice(Office office)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (office.OfficeName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || office.Adress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private async Task AddItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("office", office);
        parameters.Add("ButtonText", "Создать");

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<AddOfficeDialog>("Добавить Офис", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            SaveOffice();
        }
    }

    private async Task EditOffice(int id)
    {
        office = offices.FirstOrDefault(c => c.ID == id);
        var parameters = new DialogParameters();
        parameters.Add("office", office);
        parameters.Add("ButtonText", "Сохранить изменения");

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<AddOfficeDialog>("Изменить Офис", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            SaveOffice();
        }
        else
        {
            office = new Office();
        }
    }

    private void SaveOffice()
    {
        office.ClientID = ID;
        officeService.SaveOffice(office);
        office = new Office() { };
        Snackbar.Add("Офис Сохранен.", Severity.Success);
        getOffices();
    }

    private async Task DeleteOffice(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ButtonText", "Удалить");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveClientDialog>("Удалить офис?", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            officeService.DeleteOffice(id);
            Snackbar.Add("Офис удален.", Severity.Success);
            getOffices();
        }
    }
}