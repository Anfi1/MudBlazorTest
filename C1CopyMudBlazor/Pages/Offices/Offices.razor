@page "/Offices"
@using Microsoft.EntityFrameworkCore
@inject IDialogService DialogService
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<MudButton OnClick="@AddItem" Color="@Color.Success" Class="add-item-btn">Добавить Клиента</MudButton>

<MudTable Items="@offices" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<Office,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Клиенты</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Office, object>(x=>x.ID)">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Office, object>(x=>x.OfficeName)">OfficeName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Office, object>(x=>x.Adress)">Address</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.ID</MudTd>
        <MudTd DataLabel="Name">@context.OfficeName</MudTd>
        <MudTd DataLabel="Address">@context.Adress</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Nr">@context.ID</MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.OfficeName" Required />
        </MudTd>
        <MudTd DataLabel="Adress">
            <MudTextField @bind-Value="@context.Adress" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
<MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
<MudSwitch @bind-Checked="@canCancelEdit" Color="Color.Info">Can Cancel Edit</MudSwitch>
<MudSwitch @bind-Checked="@blockSwitch" Color="Color.Success">Block Edit Row Switching</MudSwitch>
<MudGrid>
    <MudItem xs="12" md="4">
        <MudSelect Label="Edit Trigger" T="TableEditTrigger" @bind-Value="editTrigger">
            <MudSelectItem Value="TableEditTrigger.RowClick">Row Click</MudSelectItem>
            <MudSelectItem Value="TableEditTrigger.EditButton">Edit Button</MudSelectItem>
        </MudSelect>
    </MudItem>
    @if (editTrigger == TableEditTrigger.EditButton)
    {
        <MudItem xs="12" md="4">
            <MudSelect Label="Edit Button Postion" T="TableEditButtonPosition" @bind-Value="editButtonPosition">
                <MudSelectItem Value="TableEditButtonPosition.Start">Start</MudSelectItem>
                <MudSelectItem Value="TableEditButtonPosition.End">End</MudSelectItem>
                <MudSelectItem Value="TableEditButtonPosition.StartAndEnd">Start and End</MudSelectItem>
            </MudSelect>
        </MudItem>
    }
    <MudItem xs="12" md="4">
        <MudSelect Label="Apply Button Postion" T="TableApplyButtonPosition" @bind-Value="applyButtonPosition">
            <MudSelectItem Value="TableApplyButtonPosition.Start">Start</MudSelectItem>
            <MudSelectItem Value="TableApplyButtonPosition.End">End</MudSelectItem>
            <MudSelectItem Value="TableApplyButtonPosition.StartAndEnd">Start and End</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

<MudText Inline="true">Selected1: @selectedItem1?.OfficeName</MudText>


@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private Office selectedItem1 = null;
    private Office elementBeforeEdit;
    private HashSet<Office> selectedItems1 = new HashSet<Office>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<Office> offices = new List<Office>();

    protected override async Task OnInitializedAsync()
    {
        using (ApplicationContext db =new ApplicationContext())
        {
            offices = await db.Offices.Include(o=>o.Client).ToListAsync();
        }
    }
    void HandleClick(MouseEventArgs args)
    {
        Console.WriteLine("This is a left click");
    }

    void HandleMouseUp(MouseEventArgs args)
    {
        if (args.Button == 2)
            Console.WriteLine("This is a right click");
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                ID = ((Office)element).ID,
                OfficeName = ((Office)element).OfficeName
            };
    }

    private void ItemHasBeenCommitted(object o)
    {
        using (ApplicationContext db = new ApplicationContext())
        {
            db.Update((Office)o);
            db.SaveChangesAsync();
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Office)element).ID = elementBeforeEdit.ID;
        ((Office)element).OfficeName = elementBeforeEdit.OfficeName;
    }

    private bool FilterFunc(Office element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.OfficeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    async Task AddItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Введите название офиса для того чтобы его добавить");
        parameters.Add("ButtonText", "Добавить");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<AddOfficeDialog>("Добавить Оффис", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var office = result.Data as Office;
            offices.Append(office);
            using (ApplicationContext db = new ApplicationContext())
            {
                db.Offices.Add(office);
                db.SaveChangesAsync();
            }
        }
    }
}