@page "/Offices"
@using C1CopyMudBlazor.Data.Interfaces
@using C1CopyMudBlazor.Pages.Clients.Dialog
@inject IDialogService DialogService
@inject IOfficeService officeService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles="admin")]

<PageTitle>Офисы</PageTitle>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Добавить / Изменить офис</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="office.OfficeName" Label="Название Офиса" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="office.Adress" Label="Адрес" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br/>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Сохранить Офис</MudButton>
    </MudCardContent>
</MudCard>
<br/>
<MudTable Elevation="25" Items="getOffices()" Filter="new Func<Office, bool>(Search)" @bind-customer="office">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Офисы</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Офис</MudTh>
        <MudTh>Адрес</MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FirstName">@context.OfficeName</MudTd>
        <MudTd DataLabel="LastName">@context.Adress</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"/>
            <MudFab @onclick="@(() => Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private string searchString = "";
    private Office office = new Office();
    private List<Office> offices = new List<Office>();

    protected override async Task OnInitializedAsync()
    {
        getOffices();
    }

    private List<Office> getOffices()
    {
        offices = officeService.GetOffices();
        return offices;
    }

    private bool Search(Office office)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (office.OfficeName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || office.Adress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        officeService.SaveOffice(office);
        office = new Office();
        Snackbar.Add("Customer Saved.", Severity.Success);
        getOffices();
    }

    private void Edit(int id)
    {
        office = offices.FirstOrDefault(c => c.ID == id);
    }

    private async Task Delete(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ClientName", $"{office.OfficeName}");
        parameters.Add("ButtonText", "Удалить");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveClientDialog>("Удалить офис?", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            officeService.DeleteOffice(id);
            Snackbar.Add("Customer Deleted.", Severity.Success);
            getOffices();
        }
        
    }

}