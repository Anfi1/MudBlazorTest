@using C1CopyMudBlazor.Pages.Clients.Dialog
@inject IWorkPlaceService workPlaceService
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudTable Hover="true" @ondblclick="(x) => RedirectToWorkPlace()" Elevation="25" @ref="mudTable" T="WorkPlace" 
          Items="getWorkPlaces()" OnRowClick="RowClickEvent" RowClassFunc="@SelectedRowClassFunc" @bind-customer="workPlace" Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Рабочие места</MudText>
        <MudSpacer/>
        <MudFab OnClick="AddItem" Size="Size.Small" Class="ml-4 mt-4" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Номер рабочего места</MudTh>
        <MudTh>Наличие техники</MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FIO">@context.WorkplaceNumber</MudTd>
        <MudTd DataLabel="FIO">@context.teches.Any()</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
        </MudTd>
    </RowTemplate>
    <PagerContent>
                    <MudTablePager/>
                </PagerContent>
</MudTable>

@code {

    [Parameter]
    public int OfficeID { get; set; }

    [Parameter]
    public NavigationManager NavigationManager { get; set; }
    
    [Parameter] public string name { get; set; }
    [Parameter] public string officename { get; set; }

    private string searchString = "";
    private MudTable<WorkPlace> mudTable;
    private int selectedRowNumber = -1;
    private WorkPlace selectedItem1;
    private WorkPlace workPlace = new WorkPlace();
    private IEnumerable<WorkPlace> workPlaces = new List<WorkPlace>();

    protected override async Task OnInitializedAsync()
    {
        getWorkPlaces();
    }

    private void RedirectToWorkPlace()
    {
        NavigationManager.NavigateTo($"/Clients/{name}/Offices/{officename}/Workplace/{selectedItem1.ID}");
    }

    private void RowClickEvent(TableRowClickEventArgs<WorkPlace> item)
    {
        selectedItem1 = item.Item;
    }

    private string SelectedRowClassFunc(WorkPlace legal, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(legal))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private IEnumerable<WorkPlace> getWorkPlaces()
    {
        if (OfficeID != null)
        {
            workPlaces = workPlaceService.GetWorkPlacesByOfficeID(OfficeID);
        }
        else
        {
            workPlaces = workPlaceService.GetWorkPlaces();
        }
        return workPlaces;
    }

    private void Save()
    {
        workPlace.OfficeID = OfficeID;
        workPlaceService.SaveWorkPlace(workPlace);
        workPlace = new WorkPlace();
        Snackbar.Add("Изменения сохранены", Severity.Success);
        getWorkPlaces();
    }

    private async Task AddItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("WorkPlace", workPlace);
    
        var options = new DialogOptions() { CloseButton = false };
        var dialog = DialogService.Show<WorkPlaceEditAddDialog>("Добавить Рабочее место", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Save();
        }
    }
    
    // private async Task Edit(int id)
    // {
    //     workPlaces = workPlaces.FirstOrDefault(c => c.ID == id);
    //     var parameters = new DialogParameters();
    //     parameters.Add("Legal", legal);
    //
    //     var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Large };
    //     var dialog = DialogService.Show<LegalEditAddDialog>("Изменить Юр. лицо", parameters, options);
    //     var result = await dialog.Result;
    //     if (!result.Cancelled)
    //     {
    //         Save();
    //     }
    //     else
    //     {
    //         legal = new LegalEntities();
    //     }
    // }
    //
    private async Task Delete(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ClientName", $"{workPlace.WorkplaceNumber}");
        parameters.Add("ButtonText", "Удалить");
        parameters.Add("Color", Color.Error);
    
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveClientDialog>("Удалить рабочее место?", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            workPlaceService.DeleteWorkPlace(id);
            Snackbar.Add("Рабочее место удалено.", Severity.Success);
            getWorkPlaces();
        }
    }
}