@page "/Legal"
@using C1CopyMudBlazor.Data.Interfaces
@using C1CopyMudBlazor.Pages.Clients.Dialog
@inject IDialogService DialogService
@inject ILegalEntitiesService legalService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles="admin")]

<MudTable Hover="true" @ondblclick="(x) => RedirectToLegal()" Elevation="25" @ref="mudTable" T="LegalEntities" Items="getLegals()" Filter="new Func<LegalEntities, bool>(Search)" OnRowClick="RowClickEvent" RowClassFunc="@SelectedRowClassFunc" @bind-customer="legal">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Юр лица</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Поиск по таблице..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudFab OnClick="AddItem" Size="Size.Small" Class="ml-4 mt-4" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success"/>
    </ToolBarContent>
    <ColGroup>
            <col style="width: 33%;"/>
            <col style="width: 33%;"/>
            <col style="width: 33%;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Наименование</MudTh>
        <MudTh>Почта</MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FIO">@context.Name</MudTd>
        <MudTd DataLabel="FIO">@context.Email</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"/>
            <MudFab @onclick="@(() => Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
        </MudTd>
    </RowTemplate>
    <PagerContent>
            <MudTablePager/>
        </PagerContent>
</MudTable>

@code {
    [Parameter] public string name { get; set; }
    [Parameter] public int ID { get; set; }
    private string searchString = "";
    private MudTable<LegalEntities> mudTable;
    private int selectedRowNumber = -1;
    private LegalEntities selectedItem1;
    private LegalEntities legal = new LegalEntities();
    private IEnumerable<LegalEntities> legals = new List<LegalEntities>();

    protected override async Task OnInitializedAsync()
    {
        getLegals();
    }

    private void RedirectToLegal()
    {
        @if (name == null)
        {
            NavigationManager.NavigateTo($"/Legal/{selectedItem1.Name}");
        }
        else
        {
            NavigationManager.NavigateTo($"/Clients/{name}/Legal/{selectedItem1.Name}");
        }
    }
    private void RowClickEvent(TableRowClickEventArgs<LegalEntities> item)
    {
        selectedItem1 = item.Item;
    }
    private string SelectedRowClassFunc(LegalEntities legal, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(legal))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private IEnumerable<LegalEntities> getLegals()
    {
        if (name != null)
        {
            legals = legalService.GetLegalEntitiesByClient(name);
        }
        else
        {
            legals = legalService.GetLegalEntities();
        }
        return legals;
    }

    private bool Search(LegalEntities legal)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (legal.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || legal.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        legal.ClientID = ID;
        legalService.SaveLegalEntities(legal);
        legal = new LegalEntities();
        Snackbar.Add("Customer Saved.", Severity.Success);
        getLegals();
    }

    private async Task AddItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("Legal", legal);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<LegalEditAddDialog>("Добавить Юр. лицо", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Save();
        }
    }

    private async Task Edit(int id)
    {
        legal = legals.FirstOrDefault(c => c.ID == id);
        var parameters = new DialogParameters();
        parameters.Add("Legal", legal);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<LegalEditAddDialog>("Изменить Юр. лицо", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Save();
        }
        else
        {
            legal = new LegalEntities();
        }
    }

    private async Task Delete(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ClientName", $"{legal.Name}");
        parameters.Add("ButtonText", "Удалить");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveClientDialog>("Удалить Юр.лицо?", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            legalService.DeleteLegalEntities(id);
            Snackbar.Add("Юр.лицо удалено.", Severity.Success);
            getLegals();
        }
    }

}