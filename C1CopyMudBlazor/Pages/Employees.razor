@page "/Employees"
@using C1CopyMudBlazor.Data.Interfaces
@using C1CopyMudBlazor.Pages.Clients
@inject IDialogService DialogService
@inject IWorkerService workerService
@inject IOfficeService officeService
@inject ISnackbar Snackbar

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Добавить / Изменить сотрудника</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="worker.FIO" Label="ФИО" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudSelect @bind-Value="worker.OfficeID" Label="Офис" Variant="Variant.Text" Margin="Margin.Normal">
            @foreach (var item in officeService.GetOffices())
            {
                <MudSelectItem Value="@item.ID">@item.OfficeName</MudSelectItem>
            }
            
        </MudSelect>
        <MudTextField @bind-Value="worker.WorkPlaceID" Label="Номер рабочего места" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br/>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Сохранить изменения</MudButton>
    </MudCardContent>
</MudCard>
<br/>
<MudTable Elevation="25" Items="getWorkers()" Filter="new Func<Worker, bool>(Search)" @bind-customer="worker">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Сотрудники</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Поиск по таблице..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Действия</MudTh>
        <MudTh>Клиент</MudTh>
        <MudTh>Фио</MudTh>
        <MudTh>№ места</MudTh>
        <MudTh>Офис</MudTh>
        <MudTh>AnyDesk</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="" Style="width: 40px">
            <MudFab @onclick="@(() => Edit(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"/>
            <MudFab @onclick="@(() => Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
        </MudTd>
        <MudTd DataLabel="FIO">@context.Office.Client.Name</MudTd>
        <MudTd DataLabel="FIO">@context.FIO</MudTd>
        <MudTd DataLabel="WorkPlace">@context.WorkPlaceID</MudTd>
        <MudTd DataLabel="WorkPlace">@context.Office.OfficeName</MudTd>


        <MudTd DataLabel="WorkPlace">
            <MudLink Href=@($"anydesk:{context.AnyDesk}")>@context.AnyDesk</MudLink>
        </MudTd>

    </RowTemplate>
</MudTable>


@code {
    public string name = "";
    private string searchString = "";
    private Worker worker = new Worker();
    private List<Worker> workers = new List<Worker>();

    protected override async Task OnInitializedAsync()
    {
        getWorkers();
    }

    private List<Worker> getWorkers()
    {
        workers = workerService.GetWorkers();
        return workers;
    }

    private bool Search(Worker worker)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (worker.FIO.Contains(searchString, StringComparison.OrdinalIgnoreCase)

            || worker.Office.Client.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || worker.Office.OfficeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        workerService.SaveWorker(worker);
        worker = new Worker();
        Snackbar.Add("Customer Saved.", Severity.Success);
        getWorkers();
    }

    private void Edit(int id)
    {
        worker = workers.FirstOrDefault(c => c.ID == id);
    }

    private async Task Delete(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ClientName", $"{worker.FIO}");
        parameters.Add("ButtonText", "Удалить");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveClientDialog>("Удалить сотрудника?", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            workerService.DeleteWorker(id);
            Snackbar.Add("Сотрудник удален.", Severity.Success);
            getWorkers();
        }
    }

}